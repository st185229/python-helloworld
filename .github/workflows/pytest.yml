##  Named of the workflow.
name: Pytest

## Set the trigger policy.
## In this case, the workflow is execute on a `push` event,
## or when a new commit is pushed to the repository
on: push

## List the steps to be executed by the workflow
jobs:
  ## Set the name of the job
  build:
    ## Configure the operating system the workflow should run on.
    ## In this case, the job on Ubuntu. Additionally, set a the job
    ## to execute on different Python versions 
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.7 ]
    ## Define a sequence of steps to be executed
    steps:
      ## Use the public `checkout` action  in version v2  
      ## to checkout the existing code in the repository
      - name: Check out the repo
        uses: actions/checkout@v2
        ## Use the public `setup-python` actoin  in version v2
        ## to install python on the Ubuntu based environment.
        ## Additionally, it ensures to loop through all
        ## the defined Python versions.
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
        ## Install all necessary dependencies .
        ## For example, pytest and any defined packages within the requirements.txt file.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8  pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          ## Run all pytests by inovking the `pytest command`
      - name: Test with pytest
        run: |
          pytest
      - name: Build docker
        run: |
          docker build -t go-helloworld .
          docker tag go-helloworld pixelpotato/go-helloworld:v1.0.0
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: sthoma87993/go-helloworld:v1.0.0
